/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using mailslurp_netstandard_2x.Client;
using mailslurp_netstandard_2x.Api;
// uncomment below to import models
//using mailslurp_netstandard_2x.Model;

namespace mailslurp_netstandard_2x.Test.Api
{
    /// <summary>
    ///  Class for testing InboxControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InboxControllerApiTests : IDisposable
    {
        private InboxControllerApi instance;

        public InboxControllerApiTests()
        {
            instance = new InboxControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InboxControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' InboxControllerApi
            //Assert.IsType<InboxControllerApi>(instance);
        }

        /// <summary>
        /// Test CreateInbox
        /// </summary>
        [Fact]
        public void CreateInboxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string aCustomEmailAddressToUseWithTheInboxDefaultsToNullWhenNullMailSlurpWillAssignARandomEmailAddressToTheInboxSuchAs123mailslurpComIfYouUseTheUseDomainPoolOptionWhenTheEmailAddressIsNullItWillGenerateAnEmailAddressWithAMoreVariedDomainEndingSuchAs123mailslurpInfoOr123mailslurpBizWhenACustomEmailAddressIsProvidedTheAddressIsSplitIntoADomainAndTheDomainIsQueriedAgainstYourUserIfYouHaveCreatedTheDomainInTheMailSlurpDashboardAndVerifiedItYouCanUseAnyEmailAddressThatEndsWithTheDomainNoteDomainTypesMustMatchTheInboxTypeSoSMTPInboxesWillOnlyWorkWithSMTPTypeDomainsAvoidSMTPInboxesIfYouNeedToSendEmailsAsTheyCanOnlyReceiveSendAnEmailToThisAddressAndTheInboxWillReceiveAndStoreItForYouToRetrieveTheEmailUseTheInboxAndEmailControllerEndpointsWithTheInboxID = null;
            //List<string> tagsThatInboxHasBeenTaggedWithTagsCanBeAddedToInboxesToGroupDifferentInboxesWithinAnAccountYouCanAlsoSearchForInboxesByTagInTheDashboardUI = null;
            //string optionalNameOfTheInboxDisplayedInTheDashboardForEasierSearchAndUsedAsTheSenderNameWhenSendingEmails = null;
            //string optionalDescriptionOfTheInboxForLabellingPurposesIsShownInTheDashboardAndCanBeUsedWith = null;
            //bool? useTheMailSlurpDomainNamePoolWithThisInboxWhenCreatingTheEmailAddressDefaultsToNullIfEnabledTheInboxWillBeAnEmailAddressWithADomainRandomlyChosenFromAListOfTheMailSlurpDomainsThisIsUsefulWhenTheDefaultMailslurpComEmailAddressesUsedWithInboxesAreBlockedOrConsideredSpamByAProviderOrReceivingServiceWhenDomainPoolIsEnabledAnEmailAddressWillBeGeneratedEndingInMailslurpWorldinfoxyzThisMeansATLDIsRandomlySelectingFromAListOfBizInfoXyzEtcToAddVarianceToTheGeneratedEmailAddressesWhenNullOrFalseMailSlurpUsesTheDefaultBehaviorOfMailslurpComOrCustomEmailAddressProvidedByTheEmailAddressFieldNoteThisFeatureIsOnlyAvailableForHTTPInboxTypes = null;
            //bool? isTheInboxAFavoriteMarkingAnInboxAsAFavoriteIsTypicallyDoneInTheDashboardForQuickAccessOrFiltering = null;
            //DateTime? optionalInboxExpirationDateIfNullThenThisInboxIsPermanentAndTheEmailsInItWontBeDeletedIfAnExpirationDateIsProvidedOrIsRequiredByYourPlanTheInboxWillBeClosedWhenTheExpirationTimeIsReachedExpiredInboxesStillContainTheirEmailsButCanNoLongerSendOrReceiveEmailsAnExpiredInboxRecordIsCreatedWhenAnInboxAndTheEmailAddressAndInboxIDAreRecordedTheExpiresAtPropertyIsATimestampStringInISODateTimeFormatYyyyMMDdTHHmmssSSSXXX = null;
            //long? numberOfMillisecondsThatInboxShouldExistFor = null;
            //bool? dEPRECATEDTeamAccessIsAlwaysTrueGrantTeamAccessToThisInboxAndTheEmailsThatBelongToItForTeamMembersOfYourOrganization = null;
            //string hTTPDefaultOrSMTPInboxTypeHTTPInboxesAreDefaultAndBestSolutionForMostCasesSMTPInboxesAreMoreReliableForPublicInboundEmailConsumptionButDoNotSupportSendingEmailsWhenUsingCustomDomainsTheDomainTypeMustMatchTheInboxTypeHTTPInboxesAreProcessedByAWSSESWhileSMTPInboxesUseACustomMailServerRunningAtMxMailslurpCom = null;
            //var response = instance.CreateInbox(aCustomEmailAddressToUseWithTheInboxDefaultsToNullWhenNullMailSlurpWillAssignARandomEmailAddressToTheInboxSuchAs123mailslurpComIfYouUseTheUseDomainPoolOptionWhenTheEmailAddressIsNullItWillGenerateAnEmailAddressWithAMoreVariedDomainEndingSuchAs123mailslurpInfoOr123mailslurpBizWhenACustomEmailAddressIsProvidedTheAddressIsSplitIntoADomainAndTheDomainIsQueriedAgainstYourUserIfYouHaveCreatedTheDomainInTheMailSlurpDashboardAndVerifiedItYouCanUseAnyEmailAddressThatEndsWithTheDomainNoteDomainTypesMustMatchTheInboxTypeSoSMTPInboxesWillOnlyWorkWithSMTPTypeDomainsAvoidSMTPInboxesIfYouNeedToSendEmailsAsTheyCanOnlyReceiveSendAnEmailToThisAddressAndTheInboxWillReceiveAndStoreItForYouToRetrieveTheEmailUseTheInboxAndEmailControllerEndpointsWithTheInboxID, tagsThatInboxHasBeenTaggedWithTagsCanBeAddedToInboxesToGroupDifferentInboxesWithinAnAccountYouCanAlsoSearchForInboxesByTagInTheDashboardUI, optionalNameOfTheInboxDisplayedInTheDashboardForEasierSearchAndUsedAsTheSenderNameWhenSendingEmails, optionalDescriptionOfTheInboxForLabellingPurposesIsShownInTheDashboardAndCanBeUsedWith, useTheMailSlurpDomainNamePoolWithThisInboxWhenCreatingTheEmailAddressDefaultsToNullIfEnabledTheInboxWillBeAnEmailAddressWithADomainRandomlyChosenFromAListOfTheMailSlurpDomainsThisIsUsefulWhenTheDefaultMailslurpComEmailAddressesUsedWithInboxesAreBlockedOrConsideredSpamByAProviderOrReceivingServiceWhenDomainPoolIsEnabledAnEmailAddressWillBeGeneratedEndingInMailslurpWorldinfoxyzThisMeansATLDIsRandomlySelectingFromAListOfBizInfoXyzEtcToAddVarianceToTheGeneratedEmailAddressesWhenNullOrFalseMailSlurpUsesTheDefaultBehaviorOfMailslurpComOrCustomEmailAddressProvidedByTheEmailAddressFieldNoteThisFeatureIsOnlyAvailableForHTTPInboxTypes, isTheInboxAFavoriteMarkingAnInboxAsAFavoriteIsTypicallyDoneInTheDashboardForQuickAccessOrFiltering, optionalInboxExpirationDateIfNullThenThisInboxIsPermanentAndTheEmailsInItWontBeDeletedIfAnExpirationDateIsProvidedOrIsRequiredByYourPlanTheInboxWillBeClosedWhenTheExpirationTimeIsReachedExpiredInboxesStillContainTheirEmailsButCanNoLongerSendOrReceiveEmailsAnExpiredInboxRecordIsCreatedWhenAnInboxAndTheEmailAddressAndInboxIDAreRecordedTheExpiresAtPropertyIsATimestampStringInISODateTimeFormatYyyyMMDdTHHmmssSSSXXX, numberOfMillisecondsThatInboxShouldExistFor, dEPRECATEDTeamAccessIsAlwaysTrueGrantTeamAccessToThisInboxAndTheEmailsThatBelongToItForTeamMembersOfYourOrganization, hTTPDefaultOrSMTPInboxTypeHTTPInboxesAreDefaultAndBestSolutionForMostCasesSMTPInboxesAreMoreReliableForPublicInboundEmailConsumptionButDoNotSupportSendingEmailsWhenUsingCustomDomainsTheDomainTypeMustMatchTheInboxTypeHTTPInboxesAreProcessedByAWSSESWhileSMTPInboxesUseACustomMailServerRunningAtMxMailslurpCom);
            //Assert.IsType<InboxDto>(response);
        }

        /// <summary>
        /// Test CreateInboxRuleset
        /// </summary>
        [Fact]
        public void CreateInboxRulesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //CreateInboxRulesetOptions createInboxRulesetOptions = null;
            //var response = instance.CreateInboxRuleset(inboxId, createInboxRulesetOptions);
            //Assert.IsType<InboxRulesetDto>(response);
        }

        /// <summary>
        /// Test CreateInboxWithDefaults
        /// </summary>
        [Fact]
        public void CreateInboxWithDefaultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CreateInboxWithDefaults();
            //Assert.IsType<InboxDto>(response);
        }

        /// <summary>
        /// Test CreateInboxWithOptions
        /// </summary>
        [Fact]
        public void CreateInboxWithOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateInboxDto createInboxDto = null;
            //var response = instance.CreateInboxWithOptions(createInboxDto);
            //Assert.IsType<InboxDto>(response);
        }

        /// <summary>
        /// Test DeleteAllInboxes
        /// </summary>
        [Fact]
        public void DeleteAllInboxesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteAllInboxes();
        }

        /// <summary>
        /// Test DeleteInbox
        /// </summary>
        [Fact]
        public void DeleteInboxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //instance.DeleteInbox(inboxId);
        }

        /// <summary>
        /// Test DoesInboxExist
        /// </summary>
        [Fact]
        public void DoesInboxExistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emailAddress = null;
            //var response = instance.DoesInboxExist(emailAddress);
            //Assert.IsType<InboxExistsDto>(response);
        }

        /// <summary>
        /// Test FlushExpired
        /// </summary>
        [Fact]
        public void FlushExpiredTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? before = null;
            //var response = instance.FlushExpired(before);
            //Assert.IsType<FlushExpiredInboxesResult>(response);
        }

        /// <summary>
        /// Test GetAllInboxes
        /// </summary>
        [Fact]
        public void GetAllInboxesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //bool? favourite = null;
            //string search = null;
            //string tag = null;
            //bool? dEPRECATEDOptionallyFilterByTeamAccess = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //var response = instance.GetAllInboxes(page, size, sort, favourite, search, tag, dEPRECATEDOptionallyFilterByTeamAccess, since, before);
            //Assert.IsType<PageInboxProjection>(response);
        }

        /// <summary>
        /// Test GetEmails
        /// </summary>
        [Fact]
        public void GetEmailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid idOfInboxThatEmailsBelongsTo = null;
            //int? aliasForLimitAssessedFirstBeforeAssessingAnyPassedLimit = null;
            //int? limit = null;
            //string sortTheResultsByReceivedDateAndDirectionASCOrDESC = null;
            //long? retryTimeout = null;
            //long? delayTimeout = null;
            //long? minCount = null;
            //bool? unreadOnly = null;
            //DateTime? excludeEmailsReceivedAfterThisISO8601DateTime = null;
            //DateTime? excludeEmailsReceivedBeforeThisISO8601DateTime = null;
            //var response = instance.GetEmails(idOfInboxThatEmailsBelongsTo, aliasForLimitAssessedFirstBeforeAssessingAnyPassedLimit, limit, sortTheResultsByReceivedDateAndDirectionASCOrDESC, retryTimeout, delayTimeout, minCount, unreadOnly, excludeEmailsReceivedAfterThisISO8601DateTime, excludeEmailsReceivedBeforeThisISO8601DateTime);
            //Assert.IsType<List<EmailPreview>>(response);
        }

        /// <summary>
        /// Test GetInbox
        /// </summary>
        [Fact]
        public void GetInboxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //var response = instance.GetInbox(inboxId);
            //Assert.IsType<InboxDto>(response);
        }

        /// <summary>
        /// Test GetInboxCount
        /// </summary>
        [Fact]
        public void GetInboxCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetInboxCount();
            //Assert.IsType<CountDto>(response);
        }

        /// <summary>
        /// Test GetInboxEmailCount
        /// </summary>
        [Fact]
        public void GetInboxEmailCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid idOfInboxThatEmailsBelongsTo = null;
            //var response = instance.GetInboxEmailCount(idOfInboxThatEmailsBelongsTo);
            //Assert.IsType<CountDto>(response);
        }

        /// <summary>
        /// Test GetInboxEmailsPaginated
        /// </summary>
        [Fact]
        public void GetInboxEmailsPaginatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid idOfInboxThatEmailsBelongsTo = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //var response = instance.GetInboxEmailsPaginated(idOfInboxThatEmailsBelongsTo, page, size, sort, since, before);
            //Assert.IsType<PageEmailPreview>(response);
        }

        /// <summary>
        /// Test GetInboxSentEmails
        /// </summary>
        [Fact]
        public void GetInboxSentEmailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //int? page = null;
            //int? optionalPageSizeInInboxSentEmailListPagination = null;
            //string sort = null;
            //string searchFilter = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //var response = instance.GetInboxSentEmails(inboxId, page, optionalPageSizeInInboxSentEmailListPagination, sort, searchFilter, since, before);
            //Assert.IsType<PageSentEmailProjection>(response);
        }

        /// <summary>
        /// Test GetInboxTags
        /// </summary>
        [Fact]
        public void GetInboxTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetInboxTags();
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test GetInboxes
        /// </summary>
        [Fact]
        public void GetInboxesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //string sort = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //var response = instance.GetInboxes(size, sort, since, before);
            //Assert.IsType<List<InboxDto>>(response);
        }

        /// <summary>
        /// Test GetOrganizationInboxes
        /// </summary>
        [Fact]
        public void GetOrganizationInboxesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string searchFilter = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //var response = instance.GetOrganizationInboxes(page, size, sort, searchFilter, since, before);
            //Assert.IsType<PageOrganizationInboxProjection>(response);
        }

        /// <summary>
        /// Test ListInboxRulesets
        /// </summary>
        [Fact]
        public void ListInboxRulesetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string searchFilter = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //var response = instance.ListInboxRulesets(inboxId, page, size, sort, searchFilter, since, before);
            //Assert.IsType<PageInboxRulesetDto>(response);
        }

        /// <summary>
        /// Test ListInboxTrackingPixels
        /// </summary>
        [Fact]
        public void ListInboxTrackingPixelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //int? page = null;
            //int? optionalPageSizeInInboxTrackingPixelListPagination = null;
            //string sort = null;
            //string searchFilter = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //var response = instance.ListInboxTrackingPixels(inboxId, page, optionalPageSizeInInboxTrackingPixelListPagination, sort, searchFilter, since, before);
            //Assert.IsType<PageTrackingPixelProjection>(response);
        }

        /// <summary>
        /// Test SendEmail
        /// </summary>
        [Fact]
        public void SendEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid iDOfTheInboxYouWantToSendTheEmailFrom = null;
            //SendEmailOptions sendEmailOptions = null;
            //instance.SendEmail(iDOfTheInboxYouWantToSendTheEmailFrom, sendEmailOptions);
        }

        /// <summary>
        /// Test SendEmailAndConfirm
        /// </summary>
        [Fact]
        public void SendEmailAndConfirmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid iDOfTheInboxYouWantToSendTheEmailFrom = null;
            //SendEmailOptions sendEmailOptions = null;
            //var response = instance.SendEmailAndConfirm(iDOfTheInboxYouWantToSendTheEmailFrom, sendEmailOptions);
            //Assert.IsType<SentEmailDto>(response);
        }

        /// <summary>
        /// Test SendTestEmail
        /// </summary>
        [Fact]
        public void SendTestEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //instance.SendTestEmail(inboxId);
        }

        /// <summary>
        /// Test SetInboxFavourited
        /// </summary>
        [Fact]
        public void SetInboxFavouritedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //SetInboxFavouritedOptions setInboxFavouritedOptions = null;
            //var response = instance.SetInboxFavourited(inboxId, setInboxFavouritedOptions);
            //Assert.IsType<InboxDto>(response);
        }

        /// <summary>
        /// Test UpdateInbox
        /// </summary>
        [Fact]
        public void UpdateInboxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //UpdateInboxOptions updateInboxOptions = null;
            //var response = instance.UpdateInbox(inboxId, updateInboxOptions);
            //Assert.IsType<InboxDto>(response);
        }
    }
}
