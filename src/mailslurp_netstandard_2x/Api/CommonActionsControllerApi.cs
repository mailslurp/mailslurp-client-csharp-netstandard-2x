/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp_netstandard_2x.Client;
using mailslurp_netstandard_2x.Model;

namespace mailslurp_netstandard_2x.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonActionsControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <returns>Inbox</returns>
        Inbox CreateNewEmailAddress(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?));

        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> CreateNewEmailAddressWithHttpInfo(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?));
        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <returns>Inbox</returns>
        Inbox CreateNewEmailAddress1(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?));

        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> CreateNewEmailAddress1WithHttpInfo(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?));
        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        void EmptyInbox(Guid inboxId);

        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EmptyInboxWithHttpInfo(Guid inboxId);
        /// <summary>
        /// Send an email
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from.
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <returns></returns>
        void SendEmailSimple(SimpleSendEmailOptions emailOptions);

        /// <summary>
        /// Send an email
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from.
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendEmailSimpleWithHttpInfo(SimpleSendEmailOptions emailOptions);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonActionsControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> CreateNewEmailAddressAsync(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> CreateNewEmailAddressWithHttpInfoAsync(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> CreateNewEmailAddress1Async(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> CreateNewEmailAddress1WithHttpInfoAsync(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EmptyInboxAsync(Guid inboxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EmptyInboxWithHttpInfoAsync(Guid inboxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send an email
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from.
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendEmailSimpleAsync(SimpleSendEmailOptions emailOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send an email
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from.
        /// </remarks>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailSimpleWithHttpInfoAsync(SimpleSendEmailOptions emailOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonActionsControllerApi : ICommonActionsControllerApiSync, ICommonActionsControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CommonActionsControllerApi : ICommonActionsControllerApi
    {
        private mailslurp_netstandard_2x.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonActionsControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommonActionsControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonActionsControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommonActionsControllerApi(String basePath)
        {
            this.Configuration = mailslurp_netstandard_2x.Client.Configuration.MergeConfigurations(
                mailslurp_netstandard_2x.Client.GlobalConfiguration.Instance,
                new mailslurp_netstandard_2x.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp_netstandard_2x.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp_netstandard_2x.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp_netstandard_2x.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonActionsControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CommonActionsControllerApi(mailslurp_netstandard_2x.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp_netstandard_2x.Client.Configuration.MergeConfigurations(
                mailslurp_netstandard_2x.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp_netstandard_2x.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp_netstandard_2x.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp_netstandard_2x.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonActionsControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CommonActionsControllerApi(mailslurp_netstandard_2x.Client.ISynchronousClient client, mailslurp_netstandard_2x.Client.IAsynchronousClient asyncClient, mailslurp_netstandard_2x.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp_netstandard_2x.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp_netstandard_2x.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp_netstandard_2x.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp_netstandard_2x.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp_netstandard_2x.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <returns>Inbox</returns>
        public Inbox CreateNewEmailAddress(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?))
        {
            mailslurp_netstandard_2x.Client.ApiResponse<Inbox> localVarResponse = CreateNewEmailAddressWithHttpInfo(allowTeamAccess, description, emailAddress, expiresAt, expiresIn, favourite, inboxType, name, tags, useDomainPool);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <returns>ApiResponse of Inbox</returns>
        public mailslurp_netstandard_2x.Client.ApiResponse<Inbox> CreateNewEmailAddressWithHttpInfo(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?))
        {
            mailslurp_netstandard_2x.Client.RequestOptions localVarRequestOptions = new mailslurp_netstandard_2x.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (allowTeamAccess != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "allowTeamAccess", allowTeamAccess));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }
            if (expiresAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "expiresAt", expiresAt));
            }
            if (expiresIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "expiresIn", expiresIn));
            }
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }
            if (inboxType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "inboxType", inboxType));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("multi", "tags", tags));
            }
            if (useDomainPool != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "useDomainPool", useDomainPool));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Inbox>("/createInbox", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewEmailAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> CreateNewEmailAddressAsync(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp_netstandard_2x.Client.ApiResponse<Inbox> localVarResponse = await CreateNewEmailAddressWithHttpInfoAsync(allowTeamAccess, description, emailAddress, expiresAt, expiresIn, favourite, inboxType, name, tags, useDomainPool, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<mailslurp_netstandard_2x.Client.ApiResponse<Inbox>> CreateNewEmailAddressWithHttpInfoAsync(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp_netstandard_2x.Client.RequestOptions localVarRequestOptions = new mailslurp_netstandard_2x.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (allowTeamAccess != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "allowTeamAccess", allowTeamAccess));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }
            if (expiresAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "expiresAt", expiresAt));
            }
            if (expiresIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "expiresIn", expiresIn));
            }
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }
            if (inboxType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "inboxType", inboxType));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("multi", "tags", tags));
            }
            if (useDomainPool != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "useDomainPool", useDomainPool));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Inbox>("/createInbox", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewEmailAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <returns>Inbox</returns>
        public Inbox CreateNewEmailAddress1(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?))
        {
            mailslurp_netstandard_2x.Client.ApiResponse<Inbox> localVarResponse = CreateNewEmailAddress1WithHttpInfo(allowTeamAccess, description, emailAddress, expiresAt, expiresIn, favourite, inboxType, name, tags, useDomainPool);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <returns>ApiResponse of Inbox</returns>
        public mailslurp_netstandard_2x.Client.ApiResponse<Inbox> CreateNewEmailAddress1WithHttpInfo(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?))
        {
            mailslurp_netstandard_2x.Client.RequestOptions localVarRequestOptions = new mailslurp_netstandard_2x.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (allowTeamAccess != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "allowTeamAccess", allowTeamAccess));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }
            if (expiresAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "expiresAt", expiresAt));
            }
            if (expiresIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "expiresIn", expiresIn));
            }
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }
            if (inboxType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "inboxType", inboxType));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("multi", "tags", tags));
            }
            if (useDomainPool != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "useDomainPool", useDomainPool));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Inbox>("/newEmailAddress", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewEmailAddress1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> CreateNewEmailAddress1Async(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp_netstandard_2x.Client.ApiResponse<Inbox> localVarResponse = await CreateNewEmailAddress1WithHttpInfoAsync(allowTeamAccess, description, emailAddress, expiresAt, expiresIn, favourite, inboxType, name, tags, useDomainPool, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">allowTeamAccess (optional)</param>
        /// <param name="description">description (optional)</param>
        /// <param name="emailAddress">emailAddress (optional)</param>
        /// <param name="expiresAt">expiresAt (optional)</param>
        /// <param name="expiresIn">expiresIn (optional)</param>
        /// <param name="favourite">favourite (optional)</param>
        /// <param name="inboxType">inboxType (optional)</param>
        /// <param name="name">name (optional)</param>
        /// <param name="tags">tags (optional)</param>
        /// <param name="useDomainPool">useDomainPool (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<mailslurp_netstandard_2x.Client.ApiResponse<Inbox>> CreateNewEmailAddress1WithHttpInfoAsync(bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string inboxType = default(string), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp_netstandard_2x.Client.RequestOptions localVarRequestOptions = new mailslurp_netstandard_2x.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (allowTeamAccess != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "allowTeamAccess", allowTeamAccess));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }
            if (expiresAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "expiresAt", expiresAt));
            }
            if (expiresIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "expiresIn", expiresIn));
            }
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }
            if (inboxType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "inboxType", inboxType));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("multi", "tags", tags));
            }
            if (useDomainPool != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "useDomainPool", useDomainPool));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Inbox>("/newEmailAddress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewEmailAddress1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        public void EmptyInbox(Guid inboxId)
        {
            EmptyInboxWithHttpInfo(inboxId);
        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp_netstandard_2x.Client.ApiResponse<Object> EmptyInboxWithHttpInfo(Guid inboxId)
        {
            mailslurp_netstandard_2x.Client.RequestOptions localVarRequestOptions = new mailslurp_netstandard_2x.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/emptyInbox", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmptyInbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EmptyInboxAsync(Guid inboxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await EmptyInboxWithHttpInfoAsync(inboxId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp_netstandard_2x.Client.ApiResponse<Object>> EmptyInboxWithHttpInfoAsync(Guid inboxId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp_netstandard_2x.Client.RequestOptions localVarRequestOptions = new mailslurp_netstandard_2x.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(mailslurp_netstandard_2x.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/emptyInbox", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmptyInbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an email If no senderId or inboxId provided a random email address will be used to send from.
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <returns></returns>
        public void SendEmailSimple(SimpleSendEmailOptions emailOptions)
        {
            SendEmailSimpleWithHttpInfo(emailOptions);
        }

        /// <summary>
        /// Send an email If no senderId or inboxId provided a random email address will be used to send from.
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp_netstandard_2x.Client.ApiResponse<Object> SendEmailSimpleWithHttpInfo(SimpleSendEmailOptions emailOptions)
        {
            // verify the required parameter 'emailOptions' is set
            if (emailOptions == null)
                throw new mailslurp_netstandard_2x.Client.ApiException(400, "Missing required parameter 'emailOptions' when calling CommonActionsControllerApi->SendEmailSimple");

            mailslurp_netstandard_2x.Client.RequestOptions localVarRequestOptions = new mailslurp_netstandard_2x.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = emailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sendEmail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmailSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an email If no senderId or inboxId provided a random email address will be used to send from.
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendEmailSimpleAsync(SimpleSendEmailOptions emailOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SendEmailSimpleWithHttpInfoAsync(emailOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Send an email If no senderId or inboxId provided a random email address will be used to send from.
        /// </summary>
        /// <exception cref="mailslurp_netstandard_2x.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp_netstandard_2x.Client.ApiResponse<Object>> SendEmailSimpleWithHttpInfoAsync(SimpleSendEmailOptions emailOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'emailOptions' is set
            if (emailOptions == null)
                throw new mailslurp_netstandard_2x.Client.ApiException(400, "Missing required parameter 'emailOptions' when calling CommonActionsControllerApi->SendEmailSimple");


            mailslurp_netstandard_2x.Client.RequestOptions localVarRequestOptions = new mailslurp_netstandard_2x.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp_netstandard_2x.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = emailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sendEmail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmailSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
